From 2b0bbe1bc16a8a239483d3ea15212a361567c930 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Petr=20P=C3=ADsa=C5=99?= <ppisar@redhat.com>
Date: Wed, 5 Jun 2013 15:40:40 +0200
Subject: [PATCH] Upgrade Compress-Raw-Bzip2 from 2.020 to 2.021

---
 MANIFEST                                         |   1 +
 ext/Compress-Raw-Bzip2/Changes                   |   5 +
 ext/Compress-Raw-Bzip2/README                    |   6 +-
 ext/Compress-Raw-Bzip2/bzip2-src/bzip2-cpp.patch | 355 +++++++++++++++++++++++
 ext/Compress-Raw-Bzip2/lib/Compress/Raw/Bzip2.pm |   2 +-
 ext/Compress-Raw-Bzip2/private/MakeUtil.pm       |   6 +-
 ext/Compress-Raw-Bzip2/t/000prereq.t             |   2 +-
 ext/Compress-Raw-Bzip2/t/01bzip2.t               |   0
 ext/Compress-Raw-Bzip2/t/09limitoutput.t         |   0
 ext/Compress-Raw-Bzip2/t/99pod.t                 |   0
 10 files changed, 369 insertions(+), 8 deletions(-)
 create mode 100644 ext/Compress-Raw-Bzip2/bzip2-src/bzip2-cpp.patch
 mode change 100755 => 100644 ext/Compress-Raw-Bzip2/t/000prereq.t
 mode change 100755 => 100644 ext/Compress-Raw-Bzip2/t/01bzip2.t
 mode change 100755 => 100644 ext/Compress-Raw-Bzip2/t/09limitoutput.t
 mode change 100755 => 100644 ext/Compress-Raw-Bzip2/t/99pod.t

diff --git a/MANIFEST b/MANIFEST
index d482f23..05109a1 100644
--- a/MANIFEST
+++ b/MANIFEST
@@ -126,6 +126,7 @@ ext/B/t/xref.t		See if B::Xref works
 ext/B/typemap			Compiler backend interface types
 ext/Compress-Raw-Bzip2/bzip2-src/blocksort.c
 ext/Compress-Raw-Bzip2/bzip2-src/bzip2.c
+ext/Compress-Raw-Bzip2/bzip2-src/bzip2-cpp.patch
 ext/Compress-Raw-Bzip2/bzip2-src/bzip2recover.c
 ext/Compress-Raw-Bzip2/bzip2-src/bzlib.c
 ext/Compress-Raw-Bzip2/bzip2-src/bzlib.h
diff --git a/ext/Compress-Raw-Bzip2/Changes b/ext/Compress-Raw-Bzip2/Changes
index 798e1ac..a8e2fbf 100644
--- a/ext/Compress-Raw-Bzip2/Changes
+++ b/ext/Compress-Raw-Bzip2/Changes
@@ -1,6 +1,11 @@
 CHANGES
 -------
 
+  2.021 30 August 2009
+
+      * Changed test harness so that it can cope with PERL5OPT=-MCarp=verbose
+        [RT# 47225]
+
   2.020 4 June 2009
 
       * No Changes
diff --git a/ext/Compress-Raw-Bzip2/README b/ext/Compress-Raw-Bzip2/README
index c96ce46..21ff6bc 100644
--- a/ext/Compress-Raw-Bzip2/README
+++ b/ext/Compress-Raw-Bzip2/README
@@ -1,9 +1,9 @@
 
                              Compress-Raw-Bzip2
 
-                             Version 2.020
+                             Version 2.021
 
-                               3rd June 2009
+                             30th August 2009
 
        Copyright (c) 2005-2009 Paul Marquess. All rights reserved.
           This program is free software; you can redistribute it
@@ -164,7 +164,7 @@ To help me help you, I need all of the following information:
         If you haven't installed Compress-Raw-Bzip2 then search Compress::Raw::Bzip2.pm
         for a line like this:
 
-          $VERSION = "2.020" ;
+          $VERSION = "2.021" ;
 
      c. The version of bzip2 you have used.
         If you have successfully installed Compress-Raw-Bzip2, this one-liner
diff --git a/ext/Compress-Raw-Bzip2/bzip2-src/bzip2-cpp.patch b/ext/Compress-Raw-Bzip2/bzip2-src/bzip2-cpp.patch
new file mode 100644
index 0000000..a451d6d
--- /dev/null
+++ b/ext/Compress-Raw-Bzip2/bzip2-src/bzip2-cpp.patch
@@ -0,0 +1,355 @@
+bzip2
+*** bzip2.c.orig	2009-04-10 12:58:28.000000000 +0100
+--- bzip2.c	2009-04-10 13:08:33.000000000 +0100
+***************
+*** 800,805 ****
+--- 800,810 ----
+  }
+  
+  
++ #ifdef __cplusplus
++ extern "C"
++ {
++ #endif
++ 
+  /*---------------------------------------------*/
+  static 
+  void mySignalCatcher ( IntNative n )
+***************
+*** 866,871 ****
+--- 871,879 ----
+        { cadvise(); cleanUpAndFail( 2 ); }
+  }
+  
++ #ifdef __cplusplus
++ }
++ #endif
+  
+  /*---------------------------------------------*/
+  static 
+bzip2recover
+*** bzip2recover.c.orig	2009-04-10 12:38:06.000000000 +0100
+--- bzip2recover.c	2009-04-10 12:38:44.000000000 +0100
+***************
+*** 153,159 ****
+  /*---------------------------------------------*/
+  static BitStream* bsOpenReadStream ( FILE* stream )
+  {
+!    BitStream *bs = malloc ( sizeof(BitStream) );
+     if (bs == NULL) mallocFail ( sizeof(BitStream) );
+     bs->handle = stream;
+     bs->buffer = 0;
+--- 153,159 ----
+  /*---------------------------------------------*/
+  static BitStream* bsOpenReadStream ( FILE* stream )
+  {
+!    BitStream *bs = (BitStream*) malloc ( sizeof(BitStream) );
+     if (bs == NULL) mallocFail ( sizeof(BitStream) );
+     bs->handle = stream;
+     bs->buffer = 0;
+***************
+*** 166,172 ****
+  /*---------------------------------------------*/
+  static BitStream* bsOpenWriteStream ( FILE* stream )
+  {
+!    BitStream *bs = malloc ( sizeof(BitStream) );
+     if (bs == NULL) mallocFail ( sizeof(BitStream) );
+     bs->handle = stream;
+     bs->buffer = 0;
+--- 166,172 ----
+  /*---------------------------------------------*/
+  static BitStream* bsOpenWriteStream ( FILE* stream )
+  {
+!    BitStream *bs = (BitStream*) malloc ( sizeof(BitStream) );
+     if (bs == NULL) mallocFail ( sizeof(BitStream) );
+     bs->handle = stream;
+     bs->buffer = 0;
+bzlib
+*** bzlib.c.orig	2009-04-10 12:03:44.000000000 +0100
+--- bzlib.c	2009-04-10 13:07:06.000000000 +0100
+***************
+*** 98,103 ****
+--- 98,108 ----
+  
+  
+  /*---------------------------------------------------*/
++ #ifdef __cplusplus
++ extern "C"
++ {
++ #endif
++ 
+  static
+  void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
+  {
+***************
+*** 111,116 ****
+--- 116,124 ----
+     if (addr != NULL) free ( addr );
+  }
+  
++ #ifdef __cplusplus
++ }
++ #endif
+  
+  /*---------------------------------------------------*/
+  static
+***************
+*** 165,171 ****
+     if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
+     if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
+  
+!    s = BZALLOC( sizeof(EState) );
+     if (s == NULL) return BZ_MEM_ERROR;
+     s->strm = strm;
+  
+--- 173,179 ----
+     if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
+     if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
+  
+!    s = (EState*) BZALLOC( sizeof(EState) );
+     if (s == NULL) return BZ_MEM_ERROR;
+     s->strm = strm;
+  
+***************
+*** 174,182 ****
+     s->ftab = NULL;
+  
+     n       = 100000 * blockSize100k;
+!    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
+!    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
+!    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
+  
+     if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) {
+        if (s->arr1 != NULL) BZFREE(s->arr1);
+--- 182,190 ----
+     s->ftab = NULL;
+  
+     n       = 100000 * blockSize100k;
+!    s->arr1 = (UInt32*) BZALLOC( n                  * sizeof(UInt32) );
+!    s->arr2 = (UInt32*) BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
+!    s->ftab = (UInt32*) BZALLOC( 65537              * sizeof(UInt32) );
+  
+     if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) {
+        if (s->arr1 != NULL) BZFREE(s->arr1);
+***************
+*** 362,368 ****
+  {
+     Bool progress_in  = False;
+     Bool progress_out = False;
+!    EState* s = strm->state;
+     
+     while (True) {
+  
+--- 370,376 ----
+  {
+     Bool progress_in  = False;
+     Bool progress_out = False;
+!    EState* s = (EState*) strm->state;
+     
+     while (True) {
+  
+***************
+*** 409,415 ****
+     Bool progress;
+     EState* s;
+     if (strm == NULL) return BZ_PARAM_ERROR;
+!    s = strm->state;
+     if (s == NULL) return BZ_PARAM_ERROR;
+     if (s->strm != strm) return BZ_PARAM_ERROR;
+  
+--- 417,423 ----
+     Bool progress;
+     EState* s;
+     if (strm == NULL) return BZ_PARAM_ERROR;
+!    s = (EState*) strm->state;
+     if (s == NULL) return BZ_PARAM_ERROR;
+     if (s->strm != strm) return BZ_PARAM_ERROR;
+  
+***************
+*** 469,475 ****
+  {
+     EState* s;
+     if (strm == NULL) return BZ_PARAM_ERROR;
+!    s = strm->state;
+     if (s == NULL) return BZ_PARAM_ERROR;
+     if (s->strm != strm) return BZ_PARAM_ERROR;
+  
+--- 477,483 ----
+  {
+     EState* s;
+     if (strm == NULL) return BZ_PARAM_ERROR;
+!    s = (EState*) strm->state;
+     if (s == NULL) return BZ_PARAM_ERROR;
+     if (s->strm != strm) return BZ_PARAM_ERROR;
+  
+***************
+*** 505,511 ****
+     if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
+     if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
+  
+!    s = BZALLOC( sizeof(DState) );
+     if (s == NULL) return BZ_MEM_ERROR;
+     s->strm                  = strm;
+     strm->state              = s;
+--- 513,519 ----
+     if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
+     if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
+  
+!    s = (DState*) BZALLOC( sizeof(DState) );
+     if (s == NULL) return BZ_MEM_ERROR;
+     s->strm                  = strm;
+     strm->state              = s;
+***************
+*** 684,690 ****
+  
+  
+  /*---------------------------------------------------*/
+! __inline__ Int32 BZ2_indexIntoF ( Int32 indx, Int32 *cftab )
+  {
+     Int32 nb, na, mid;
+     nb = 0;
+--- 692,701 ----
+  
+  
+  /*---------------------------------------------------*/
+! #ifndef __cplusplus
+! __inline__
+! #endif
+! Int32 BZ2_indexIntoF ( Int32 indx, Int32 *cftab )
+  {
+     Int32 nb, na, mid;
+     nb = 0;
+***************
+*** 810,816 ****
+     Bool    corrupt;
+     DState* s;
+     if (strm == NULL) return BZ_PARAM_ERROR;
+!    s = strm->state;
+     if (s == NULL) return BZ_PARAM_ERROR;
+     if (s->strm != strm) return BZ_PARAM_ERROR;
+  
+--- 821,827 ----
+     Bool    corrupt;
+     DState* s;
+     if (strm == NULL) return BZ_PARAM_ERROR;
+!    s = (DState*) strm->state;
+     if (s == NULL) return BZ_PARAM_ERROR;
+     if (s->strm != strm) return BZ_PARAM_ERROR;
+  
+***************
+*** 863,869 ****
+  {
+     DState* s;
+     if (strm == NULL) return BZ_PARAM_ERROR;
+!    s = strm->state;
+     if (s == NULL) return BZ_PARAM_ERROR;
+     if (s->strm != strm) return BZ_PARAM_ERROR;
+  
+--- 874,880 ----
+  {
+     DState* s;
+     if (strm == NULL) return BZ_PARAM_ERROR;
+!    s = (DState*) strm->state;
+     if (s == NULL) return BZ_PARAM_ERROR;
+     if (s->strm != strm) return BZ_PARAM_ERROR;
+  
+***************
+*** 934,940 ****
+     if (ferror(f))
+        { BZ_SETERR(BZ_IO_ERROR); return NULL; };
+  
+!    bzf = malloc ( sizeof(bzFile) );
+     if (bzf == NULL)
+        { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
+  
+--- 945,951 ----
+     if (ferror(f))
+        { BZ_SETERR(BZ_IO_ERROR); return NULL; };
+  
+!    bzf = (bzFile*) malloc ( sizeof(bzFile) );
+     if (bzf == NULL)
+        { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
+  
+***************
+*** 982,988 ****
+        { BZ_SETERR(BZ_OK); return; };
+  
+     bzf->strm.avail_in = len;
+!    bzf->strm.next_in  = buf;
+  
+     while (True) {
+        bzf->strm.avail_out = BZ_MAX_UNUSED;
+--- 993,999 ----
+        { BZ_SETERR(BZ_OK); return; };
+  
+     bzf->strm.avail_in = len;
+!    bzf->strm.next_in  = (char*)buf;
+  
+     while (True) {
+        bzf->strm.avail_out = BZ_MAX_UNUSED;
+***************
+*** 1107,1113 ****
+     if (ferror(f))
+        { BZ_SETERR(BZ_IO_ERROR); return NULL; };
+  
+!    bzf = malloc ( sizeof(bzFile) );
+     if (bzf == NULL) 
+        { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
+  
+--- 1118,1124 ----
+     if (ferror(f))
+        { BZ_SETERR(BZ_IO_ERROR); return NULL; };
+  
+!    bzf = (bzFile*) malloc ( sizeof(bzFile) );
+     if (bzf == NULL) 
+        { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
+  
+***************
+*** 1179,1185 ****
+        { BZ_SETERR(BZ_OK); return 0; };
+  
+     bzf->strm.avail_out = len;
+!    bzf->strm.next_out = buf;
+  
+     while (True) {
+  
+--- 1190,1196 ----
+        { BZ_SETERR(BZ_OK); return 0; };
+  
+     bzf->strm.avail_out = len;
+!    bzf->strm.next_out = (char*) buf;
+  
+     while (True) {
+  
+decompress
+*** decompress.c.orig	2009-04-10 12:01:27.000000000 +0100
+--- decompress.c	2009-04-10 12:03:25.000000000 +0100
+***************
+*** 209,221 ****
+        s->blockSize100k -= BZ_HDR_0;
+  
+        if (s->smallDecompress) {
+!          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
+!          s->ll4  = BZALLOC( 
+                        ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
+                     );
+           if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
+        } else {
+!          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
+           if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
+        }
+  
+--- 209,221 ----
+        s->blockSize100k -= BZ_HDR_0;
+  
+        if (s->smallDecompress) {
+!          s->ll16 = (UInt16*) BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
+!          s->ll4  = (UChar*) BZALLOC( 
+                        ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
+                     );
+           if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
+        } else {
+!          s->tt  = (UInt32*) BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
+           if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
+        }
+  
diff --git a/ext/Compress-Raw-Bzip2/lib/Compress/Raw/Bzip2.pm b/ext/Compress-Raw-Bzip2/lib/Compress/Raw/Bzip2.pm
index 6b72532..c80eae3 100644
--- a/ext/Compress-Raw-Bzip2/lib/Compress/Raw/Bzip2.pm
+++ b/ext/Compress-Raw-Bzip2/lib/Compress/Raw/Bzip2.pm
@@ -12,7 +12,7 @@ use Carp ;
 use bytes ;
 our ($VERSION, $XS_VERSION, @ISA, @EXPORT, $AUTOLOAD);
 
-$VERSION = '2.020';
+$VERSION = '2.021';
 $XS_VERSION = $VERSION; 
 $VERSION = eval $VERSION;
 
diff --git a/ext/Compress-Raw-Bzip2/private/MakeUtil.pm b/ext/Compress-Raw-Bzip2/private/MakeUtil.pm
index e595910..47aebd6 100644
--- a/ext/Compress-Raw-Bzip2/private/MakeUtil.pm
+++ b/ext/Compress-Raw-Bzip2/private/MakeUtil.pm
@@ -58,9 +58,9 @@ sub MY::postamble
 
 MyTrebleCheck:
 	@echo Checking for $$^W in files: '. "@files" . '
-	@perl -ne \'						\
-	    exit 1 if /^\s*local\s*\(\s*\$$\^W\s*\)/;		\
-         \' ' . " @files || " . '				\
+	perl -ne \'						\
+	    exit 1 if /^\s*local\s*\(\s*\$$\^W\s*\)/; \'		\
+         ' . " @files || " . '				\
 	(echo found unexpected $$^W ; exit 1)
 	@echo All is ok.
 
diff --git a/ext/Compress-Raw-Bzip2/t/000prereq.t b/ext/Compress-Raw-Bzip2/t/000prereq.t
old mode 100755
new mode 100644
index 2fb29f3..6f3872b
--- a/ext/Compress-Raw-Bzip2/t/000prereq.t
+++ b/ext/Compress-Raw-Bzip2/t/000prereq.t
@@ -19,7 +19,7 @@ BEGIN
         if eval { require Test::NoWarnings ;  import Test::NoWarnings; 1 };
 
 
-    my $VERSION = '2.020';
+    my $VERSION = '2.021';
     my @NAMES = qw(
 			
 			);
diff --git a/ext/Compress-Raw-Bzip2/t/01bzip2.t b/ext/Compress-Raw-Bzip2/t/01bzip2.t
old mode 100755
new mode 100644
diff --git a/ext/Compress-Raw-Bzip2/t/09limitoutput.t b/ext/Compress-Raw-Bzip2/t/09limitoutput.t
old mode 100755
new mode 100644
diff --git a/ext/Compress-Raw-Bzip2/t/99pod.t b/ext/Compress-Raw-Bzip2/t/99pod.t
old mode 100755
new mode 100644
-- 
1.8.1.4

