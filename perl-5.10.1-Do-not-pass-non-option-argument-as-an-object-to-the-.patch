From 6ca7107c2f71eb07f36467088eb1ec4b1327f307 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Petr=20P=C3=ADsa=C5=99?= <ppisar@redhat.com>
Date: Tue, 11 Jun 2013 13:28:27 +0200
Subject: [PATCH] Do not pass non-option argument as an object to the handler

This fix is ported back from Getopt-Long-2.39:

Changes in version 2.39
----------------------
[...]
* Passing an object as first argument to the callback handler for <>
  turned out to be a problem in cases where the argument was passed to
  other modules, e.g., Archive::Tar. Revert the change since the added
  functionality of the object is not really relevant for the <>
  callback function.

<https://bugzilla.redhat.com/show_bug.cgi?id=973022>
---
 lib/Getopt/Long.pm | 13 +++++--------
 1 file changed, 5 insertions(+), 8 deletions(-)

diff --git a/lib/Getopt/Long.pm b/lib/Getopt/Long.pm
index c827d3c..a56cd6d 100644
--- a/lib/Getopt/Long.pm
+++ b/lib/Getopt/Long.pm
@@ -698,14 +698,11 @@ sub GetOptionsFromArray(@) {
 		    local $@;
 		    local $SIG{__DIE__}  = 'DEFAULT';
 		    eval {
-			&$cb
-			  (Getopt::Long::CallBack->new
-			   (name    => $tryopt,
-			    ctl     => $ctl,
-			    opctl   => \%opctl,
-			    linkage => \%linkage,
-			    prefix  => $prefix,
-			   ));
+			# The arg to <> cannot be the CallBack object
+			# since it may be passed to other modules that
+			# get confused (e.g., Archive::Tar). Well,
+			# it's not relevant for this callback anyway.
+			&$cb($tryopt);
 		    };
 		    $@;
 		};
-- 
1.8.1.4

